---
import { getLanguageSwitchUrl, getCurrentLanguage } from '../utils/language';

export interface Props {
  currentLang?: 'pl' | 'en';
  currentUrl?: string;
}

const { currentLang = 'pl', currentUrl = Astro.url.pathname } = Astro.props;

const isPolish = currentLang === 'pl';
const baseUrl = import.meta.env.BASE_URL;

// Generate language switch URLs based on current page
const polishUrl = currentLang === 'en' ? getLanguageSwitchUrl(currentUrl, baseUrl) : currentUrl;
const englishUrl = currentLang === 'pl' ? getLanguageSwitchUrl(currentUrl, baseUrl) : currentUrl;

// Function to check if a navigation link is active
function isActiveLink(linkPath: string): boolean {
  // Normalize current URL to handle trailing slashes consistently
  const normalizedCurrentUrl = currentUrl.endsWith('/') ? currentUrl : currentUrl + '/';
  const normalizedLinkPath = linkPath.endsWith('/') ? linkPath : linkPath + '/';
  
  // Handle home page special cases
  if (normalizedLinkPath === baseUrl || normalizedLinkPath === baseUrl + '/') {
    return normalizedCurrentUrl === baseUrl || normalizedCurrentUrl === baseUrl + '/';
  }
  if (normalizedLinkPath === baseUrl + 'en/' || normalizedLinkPath === baseUrl + 'en/') {
    return normalizedCurrentUrl === baseUrl + 'en/';
  }
  
  // For other pages, check if current URL starts with the link path
  return normalizedCurrentUrl === normalizedLinkPath;
}
---

<header class="fixed top-0 left-0 right-0 z-50 bg-primary h-[75px]">
  <div class="container mx-auto px-4 h-full flex items-center justify-between">
    <!-- Logo -->
    <div class="flex items-center">
      <a href={isPolish ? `${import.meta.env.BASE_URL}` : `${import.meta.env.BASE_URL}en/`} class="block">
        <img src={`${import.meta.env.BASE_URL}logos/logo_black.svg`} alt="Southeast Jiu-Jitsu" class="w-[180px] h-auto navbar-logo" width="180" height="60" />
      </a>
    </div>

    <!-- Desktop Navigation Menu -->
    <nav class="hidden lg:flex items-center space-x-10">
      <!-- About with dropdown -->
      <div class="relative group">
        <a href={isPolish ? `${import.meta.env.BASE_URL}o-nas/` : `${import.meta.env.BASE_URL}en/about/`} class={`text-secondary hover:font-semibold hover:underline transition-all duration-200 text-base tracking-wide ${isActiveLink(isPolish ? `${import.meta.env.BASE_URL}o-nas/` : `${import.meta.env.BASE_URL}en/about/`) ? 'font-semibold underline' : 'font-normal'}`}>
          {isPolish ? "O NAS" : "ABOUT"}
        </a>
        <!-- Dropdown -->
        <div class="absolute top-full left-0 mt-2 py-2 bg-primary shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 min-w-[140px] z-50">
          <a href={isPolish ? `${import.meta.env.BASE_URL}o-nas/#why-us` : `${import.meta.env.BASE_URL}en/about/#why-us`} class="block px-4 py-2 text-secondary hover:font-semibold hover:underline text-sm transition-all duration-200">
            {isPolish ? "Dlaczego my" : "Why us"}
          </a>
          <a href={isPolish ? `${import.meta.env.BASE_URL}o-nas/#trainers` : `${import.meta.env.BASE_URL}en/about/#trainers`} class="block px-4 py-2 text-secondary hover:font-semibold hover:underline text-sm transition-all duration-200">
            {isPolish ? "Trenerzy" : "Trainers"}
          </a>
        </div>
      </div>

      <!-- Training with dropdown -->
      <div class="relative group">
        <a href={isPolish ? `${import.meta.env.BASE_URL}treningi/` : `${import.meta.env.BASE_URL}en/training/`} class={`text-secondary hover:font-semibold hover:underline transition-all duration-200 text-base tracking-wide ${isActiveLink(isPolish ? `${import.meta.env.BASE_URL}treningi/` : `${import.meta.env.BASE_URL}en/training/`) ? 'font-semibold underline' : 'font-normal'}`}>
          {isPolish ? "TRENINGI" : "TRAINING"}
        </a>
        <!-- Dropdown -->
        <div class="absolute top-full left-0 mt-2 py-2 bg-primary shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 min-w-[180px] z-50">
          <a href={isPolish ? `${import.meta.env.BASE_URL}treningi/#kids-training` : `${import.meta.env.BASE_URL}en/training/#kids-training`} class="block px-4 py-2 text-secondary hover:font-semibold hover:underline text-sm transition-all duration-200">
            {isPolish ? "Treningi dla dzieci" : "Kids Training"}
          </a>
          <a href={isPolish ? `${import.meta.env.BASE_URL}treningi/#private-training` : `${import.meta.env.BASE_URL}en/training/#private-training`} class="block px-4 py-2 text-secondary hover:font-semibold hover:underline text-sm transition-all duration-200">
            {isPolish ? "Trening personalny" : "Personal Training"}
          </a>
          <a href={isPolish ? `${import.meta.env.BASE_URL}treningi/#cla` : `${import.meta.env.BASE_URL}en/training/#cla`} class="block px-4 py-2 text-secondary hover:font-semibold hover:underline text-sm transition-all duration-200">
            {isPolish ? "Metody treningowe" : "Training Methods"}
          </a>
        </div>
      </div>

      <a href={isPolish ? `${import.meta.env.BASE_URL}harmonogram/` : `${import.meta.env.BASE_URL}en/schedule/`} class={`text-secondary hover:font-semibold hover:underline transition-all duration-200 text-base tracking-wide ${isActiveLink(isPolish ? `${import.meta.env.BASE_URL}harmonogram/` : `${import.meta.env.BASE_URL}en/schedule/`) ? 'font-semibold underline' : 'font-normal'}`}>
        {isPolish ? "HARMONOGRAM" : "SCHEDULE"}
      </a>
      <a href="https://southeastjiujitsu.wod.guru/wizytowka" class="text-secondary hover:font-semibold hover:underline transition-all duration-200 text-base font-normal tracking-wide">
        {isPolish ? "KARNETY" : "MEMBERSHIPS"}
      </a>
      <a href="https://southeastjiujitsu.wod.guru/user/login" class="text-secondary hover:font-semibold hover:underline transition-all duration-200 text-base font-normal tracking-wide">
        {isPolish ? "MOJE KONTO" : "MY ACCOUNT"}
      </a>
    </nav>

    <!-- Right Side: Social & Language -->
    <div class="flex items-center space-x-3">
      <!-- Social Media Icons -->
      <div class="flex items-center space-x-3">
        <a href="https://www.instagram.com/southeast.jiujitsu/" target="_blank" rel="noopener noreferrer" class="text-secondary transition-all duration-200">
          <svg class="w-[22px] h-[22px] hover:stroke-[2]" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="1.5">
            <rect x="2" y="2" width="20" height="20" rx="5" ry="5"></rect>
            <path d="m16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"></path>
            <line x1="17.5" y1="6.5" x2="17.51" y2="6.5"></line>
          </svg>
        </a>
        <a href="https://www.facebook.com/profile.php?id=61570579595150" target="_blank" rel="noopener noreferrer" class="text-secondary transition-all duration-200">
          <svg class="w-[22px] h-[22px] hover:stroke-[2]" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="1.5">
            <path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"></path>
          </svg>
        </a>
      </div>

      <!-- Language Switcher -->
      <div class="flex items-center space-x-1 text-sm text-secondary">
        <a href={polishUrl} class={`transition-all duration-200 hover:font-semibold ${isPolish ? 'font-semibold' : 'font-normal'}`}>
          PL
        </a>
        <span>|</span>
        <a href={englishUrl} class={`transition-all duration-200 hover:font-semibold ${!isPolish ? 'font-semibold' : 'font-normal'}`}>
          EN
        </a>
      </div>

      <!-- Mobile Menu Button -->
      <button class="lg:hidden text-secondary hover:text-gray-700 transition-colors duration-200 ml-3" id="mobile-menu-button">
        <div class="hamburger-icon" id="hamburger-icon">
          <span></span>
          <span></span>
          <span></span>
        </div>
      </button>
    </div>
  </div>

  <!-- Mobile Menu -->
  <div class="lg:hidden bg-primary fixed inset-0 top-[75px] mobile-menu-container z-40 overflow-y-auto" id="mobile-menu">
    <nav class="container mx-auto px-4 py-6 space-y-3 mobile-menu">
      <!-- About section -->
      <div>
        <a href={isPolish ? `${import.meta.env.BASE_URL}o-nas/` : `${import.meta.env.BASE_URL}en/about/`} class={`mobile-menu-item block text-secondary hover:font-semibold hover:underline transition-all duration-200 text-base tracking-wide py-3 border-b border-primary ${isActiveLink(isPolish ? `${import.meta.env.BASE_URL}o-nas/` : `${import.meta.env.BASE_URL}en/about/`) ? 'font-semibold underline' : 'font-normal'}`}>
          {isPolish ? "O NAS" : "ABOUT"}
        </a>
        <a href={isPolish ? `${import.meta.env.BASE_URL}o-nas/#why-us` : `${import.meta.env.BASE_URL}en/about/#why-us`} class="mobile-menu-item block text-secondary hover:font-semibold hover:underline transition-all duration-200 text-sm tracking-wide py-2 pl-4 border-b border-primary font-normal">
          {isPolish ? "→ Dlaczego my" : "→ Why us"}
        </a>
        <a href={isPolish ? `${import.meta.env.BASE_URL}o-nas/#trainers` : `${import.meta.env.BASE_URL}en/about/#trainers`} class="mobile-menu-item block text-secondary hover:font-semibold hover:underline transition-all duration-200 text-sm tracking-wide py-2 pl-4 border-b border-primary font-normal">
          {isPolish ? "→ Trenerzy" : "→ Trainers"}
        </a>
      </div>

      <!-- Training section -->
      <div>
        <a href={isPolish ? `${import.meta.env.BASE_URL}treningi/` : `${import.meta.env.BASE_URL}en/training/`} class={`mobile-menu-item block text-secondary hover:font-semibold hover:underline transition-all duration-200 text-base tracking-wide py-3 border-b border-primary ${isActiveLink(isPolish ? `${import.meta.env.BASE_URL}treningi/` : `${import.meta.env.BASE_URL}en/training/`) ? 'font-semibold underline' : 'font-normal'}`}>
          {isPolish ? "TRENINGI" : "TRAINING"}
        </a>
        <a href={isPolish ? `${import.meta.env.BASE_URL}treningi/#kids-training` : `${import.meta.env.BASE_URL}en/training/#kids-training`} class="mobile-menu-item block text-secondary hover:font-semibold hover:underline transition-all duration-200 text-sm tracking-wide py-2 pl-4 border-b border-primary font-normal">
          {isPolish ? "→ Treningi dla dzieci" : "→ Kids Training"}
        </a>
        <a href={isPolish ? `${import.meta.env.BASE_URL}treningi/#private-training` : `${import.meta.env.BASE_URL}en/training/#private-training`} class="mobile-menu-item block text-secondary hover:font-semibold hover:underline transition-all duration-200 text-sm tracking-wide py-2 pl-4 border-b border-primary font-normal">
          {isPolish ? "→ Trening personalny" : "→ Personal Training"}
        </a>
        <a href={isPolish ? `${import.meta.env.BASE_URL}treningi/#cla` : `${import.meta.env.BASE_URL}en/training/#cla`} class="mobile-menu-item block text-secondary hover:font-semibold hover:underline transition-all duration-200 text-sm tracking-wide py-2 pl-4 border-b border-primary font-normal">
          {isPolish ? "→ Metody treningowe" : "→ Training Methods"}
        </a>
      </div>

      <a href={isPolish ? `${import.meta.env.BASE_URL}harmonogram/` : `${import.meta.env.BASE_URL}en/schedule/`} class={`mobile-menu-item block text-secondary hover:font-semibold hover:underline transition-all duration-200 text-base tracking-wide py-3 border-b border-primary ${isActiveLink(isPolish ? `${import.meta.env.BASE_URL}harmonogram/` : `${import.meta.env.BASE_URL}en/schedule/`) ? 'font-semibold underline' : 'font-normal'}`}>
        {isPolish ? "HARMONOGRAM" : "SCHEDULE"}
      </a>
      <a href="https://southeastjiujitsu.wod.guru/wizytowka" class="mobile-menu-item block text-secondary hover:font-semibold hover:underline transition-all duration-200 text-base font-normal tracking-wide py-3 border-b border-primary">
        {isPolish ? "KARNETY" : "MEMBERSHIPS"}
      </a>
      <a href="https://southeastjiujitsu.wod.guru/user/login" class="mobile-menu-item block text-secondary hover:font-semibold hover:underline transition-all duration-200 text-base font-normal tracking-wide py-3">
        {isPolish ? "MOJE KONTO" : "MY ACCOUNT"}
      </a>
    </nav>
  </div>
</header>

<script>
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  const hamburgerIcon = document.getElementById('hamburger-icon');
  
  let isMenuOpen = false;
  
  mobileMenuButton?.addEventListener('click', () => {
    isMenuOpen = !isMenuOpen;
    
    if (isMenuOpen) {
      // Open menu
      hamburgerIcon?.classList.add('open');
      mobileMenu?.classList.add('open');
      // Prevent body scroll
      document.body.style.overflow = 'hidden';
    } else {
      // Close menu
      hamburgerIcon?.classList.remove('open');
      mobileMenu?.classList.remove('open');
      // Restore body scroll
      document.body.style.overflow = '';
    }
  });

  // Close mobile menu when clicking outside
  document.addEventListener('click', (e) => {
    if (!mobileMenuButton?.contains(e.target as Node) && !mobileMenu?.contains(e.target as Node)) {
      if (isMenuOpen) {
        isMenuOpen = false;
        hamburgerIcon?.classList.remove('open');
        mobileMenu?.classList.remove('open');
        // Restore body scroll
        document.body.style.overflow = '';
      }
    }
  });

  // Close mobile menu when clicking on menu items
  const menuItems = mobileMenu?.querySelectorAll('.mobile-menu-item');
  menuItems?.forEach(item => {
    item.addEventListener('click', () => {
      isMenuOpen = false;
      hamburgerIcon?.classList.remove('open');
      mobileMenu?.classList.remove('open');
      // Restore body scroll
      document.body.style.overflow = '';
    });
  });

  // Smart asset detection for anchor link scrolling
  function waitForCriticalAssets(targetElement) {
    return new Promise((resolve) => {
      const assetsToWait = [];
      
      // Get connection info for adaptive timeouts
      const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;
      const isFastConnection = !connection || connection.effectiveType === '4g' || (connection.downlink && connection.downlink > 10);
      const baseTimeout = isFastConnection ? 800 : 1500; // Adaptive base timeout
      
      // Only wait for hero video if we're scrolling to a target above the fold
      const targetRect = targetElement ? targetElement.getBoundingClientRect() : null;
      const targetY = targetRect ? targetRect.top + window.scrollY : 0;
      const isAboveFold = targetY < window.innerHeight;
      
      const video = document.getElementById('hero-video');
      if (isAboveFold && video && video.readyState < 3) {
        assetsToWait.push(new Promise(resolve => {
          if (video.readyState >= 3) {
            resolve();
          } else {
            video.addEventListener('canplaythrough', resolve, { once: true });
            video.addEventListener('error', resolve, { once: true });
            // Longer timeout for video on slow connections
            setTimeout(resolve, baseTimeout * 2);
          }
        }));
      }
      
      // Only wait for images that could affect layout between current position and target
      const currentY = window.scrollY;
      const scrollRange = [Math.min(currentY, targetY), Math.max(currentY, targetY) + window.innerHeight];
      
      const criticalImages = Array.from(document.querySelectorAll('img')).filter(img => {
        // Skip lazy-loaded images that are far from target
        if (img.loading === 'lazy') {
          const imgRect = img.getBoundingClientRect();
          const imgY = imgRect.top + window.scrollY;
          return imgY >= scrollRange[0] - window.innerHeight && imgY <= scrollRange[1] + window.innerHeight;
        }
        // Always include eager-loaded images
        return true;
      });
      
      criticalImages.forEach(img => {
        if (!img.complete) {
          assetsToWait.push(new Promise(resolve => {
            img.addEventListener('load', resolve, { once: true });
            img.addEventListener('error', resolve, { once: true });
            // Shorter timeout for images with dimensions (less layout shift risk)
            const hasExplicitDimensions = img.hasAttribute('width') && img.hasAttribute('height');
            const timeoutMultiplier = hasExplicitDimensions ? 0.5 : 1;
            setTimeout(resolve, baseTimeout * timeoutMultiplier);
          }));
        }
      });
      
      // If no critical assets to wait for, resolve quickly
      if (assetsToWait.length === 0) {
        // Still add small delay to ensure paint is complete
        setTimeout(resolve, 50);
      } else {
        // Wait for critical assets with adaptive timeout
        const maxTimeout = isFastConnection ? 2000 : 4000;
        Promise.race([
          Promise.all(assetsToWait),
          new Promise(resolve => setTimeout(resolve, maxTimeout))
        ]).then(resolve);
      }
    });
  }
  
  function scrollToAnchor(targetId, retryCount = 0) {
    const targetElement = document.getElementById(targetId);
    
    if (!targetElement) {
      console.warn(`Anchor target #${targetId} not found`);
      return;
    }
    
    // Check if user prefers reduced motion
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    
    // Check if element is positioned correctly after scroll
    const isCorrectlyPositioned = (el) => {
      const rect = el.getBoundingClientRect();
      const headerHeight = 85; // Account for scroll-margin-top
      // Element is correctly positioned if it's near the expected position (within 20px tolerance)
      return Math.abs(rect.top - headerHeight) < 20;
    };
    
    // Progressive scroll strategy: Try CSS first, then JS as fallback
    const scrollWithCSS = () => {
      // Let CSS scroll-margin-top handle positioning
      window.location.hash = targetId;
    };
    
    const scrollWithJS = () => {
      targetElement.scrollIntoView({ 
        behavior: prefersReducedMotion ? 'auto' : 'smooth',
        block: 'start'
      });
    };
    
    // Try CSS approach first (instant, respects scroll-margin-top)
    if (retryCount === 0) {
      scrollWithCSS();
      
      // Check if CSS scroll worked after a brief delay
      setTimeout(() => {
        if (!isCorrectlyPositioned(targetElement)) {
          console.log(`CSS scroll insufficient for #${targetId}, trying JS scroll`);
          scrollWithJS();
          
          // Final verification
          setTimeout(() => {
            if (!isCorrectlyPositioned(targetElement) && retryCount < 2) {
              console.log(`Retrying scroll to #${targetId}, attempt ${retryCount + 1}`);
              scrollToAnchor(targetId, retryCount + 1);
            }
          }, prefersReducedMotion ? 100 : 500);
        }
      }, 100);
    } else {
      // Subsequent attempts use JS scrolling
      scrollWithJS();
      
      setTimeout(() => {
        if (!isCorrectlyPositioned(targetElement) && retryCount < 2) {
          console.log(`Retrying scroll to #${targetId}, attempt ${retryCount + 1}`);
          scrollToAnchor(targetId, retryCount + 1);
        }
      }, prefersReducedMotion ? 100 : 500);
    }
  }
  
  function showLoadingIndicator() {
    // Only show for slow connections or if assets are actually loading
    const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;
    const isSlowConnection = connection && (connection.effectiveType === '2g' || connection.effectiveType === 'slow-2g');
    
    if (!isSlowConnection) return null;
    
    const indicator = document.createElement('div');
    indicator.id = 'scroll-loading-indicator';
    indicator.innerHTML = `
      <div style="
        position: fixed; 
        top: 50%; 
        left: 50%; 
        transform: translate(-50%, -50%);
        background: rgba(0,0,0,0.8); 
        color: white; 
        padding: 12px 20px; 
        border-radius: 6px; 
        font-size: 14px;
        z-index: 9999;
        pointer-events: none;
      ">
        <div style="display: flex; align-items: center; gap: 8px;">
          <div style="
            width: 16px; 
            height: 16px; 
            border: 2px solid transparent; 
            border-top: 2px solid white; 
            border-radius: 50%; 
            animation: spin 1s linear infinite;
          "></div>
          <span>Loading...</span>
        </div>
      </div>
      <style>
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
      </style>
    `;
    document.body.appendChild(indicator);
    return indicator;
  }
  
  function hideLoadingIndicator(indicator) {
    if (indicator && indicator.parentNode) {
      indicator.parentNode.removeChild(indicator);
    }
  }
  
  async function handleAnchorLink(targetId) {
    if (!targetId) return;
    
    const targetElement = document.getElementById(targetId);
    if (!targetElement) {
      console.warn(`Anchor target #${targetId} not found`);
      return;
    }
    
    // Show loading indicator for slow connections
    const loadingIndicator = showLoadingIndicator();
    
    try {
      // Wait for critical assets to load based on scroll target
      await waitForCriticalAssets(targetElement);
      
      // Use progressive scroll strategy
      scrollToAnchor(targetId);
      
    } finally {
      // Hide loading indicator
      setTimeout(() => hideLoadingIndicator(loadingIndicator), 100);
    }
  }
  
  function handlePageLoadAnchor() {
    if (window.location.hash) {
      const targetId = window.location.hash.substring(1);
      handleAnchorLink(targetId);
    }
  }
  
  // Handle anchor links clicked after page load
  function handleAnchorClicks() {
    document.addEventListener('click', (e) => {
      const link = e.target.closest('a[href*="#"]');
      if (!link) return;
      
      const href = link.getAttribute('href');
      if (!href) return;
      
      // Check if it's a same-page anchor link
      const url = new URL(href, window.location.href);
      if (url.pathname === window.location.pathname && url.hash) {
        e.preventDefault();
        const targetId = url.hash.substring(1);
        
        // Update URL without triggering navigation
        history.pushState(null, '', url.hash);
        
        handleAnchorLink(targetId);
      }
    });
  }

  // Run on page load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      handlePageLoadAnchor();
      handleAnchorClicks();
    });
  } else {
    handlePageLoadAnchor();
    handleAnchorClicks();
  }
</script>